--RUNNING TOTAL
SELECT
    product_id,
    SUM(sale_amount) OVER (Partition by product_id order by sale_date) as 'SalesRunningTotal'
FROM
    Sales;

-- RANK
-- Assigns a rank to each row within the product_id partition.

SELECT
    product_id,
    sales_date,
    rank() over(Partition by product_id ORDER BY sale_amount DESC) AS 'Rank_by_Sales'
FROM
    Sales;

/*

You have a table called Employee_Salaries with the following columns:

employee_id (INT)
department_id (INT)
hire_date (DATE)
salary (DECIMAL)

*/

--Calculate the average salary for each department.

SELECT
    department_id,
    AVG(salary) as "AverageSalaryByDepartment"
FROM 
    Employee_Salaries
GROUP BY
    department_id
ORDER BY
    2 DESC;

--For each employee, calculate the difference between their salary and the average salary of their department.

WITH CTE_EmployeeSalary as
(
    SELECT
        employee_id,
        department_id,
        salary
    FROM
        Employee_Salaries

),

CTE_AVGSalarybyDepartment as 
(
    SELECT
        department_id,
        AVG(salary) as "AVG_DepartmentSalary"
    FROM
        Employee_Salaries
    GROUP BY 
        department_id 
)

SELECT
    CTE1.employee_id,
    CTE1.salary,
    CTE2.AVG_DepartmentSalary,
    CTE1.salary - CTE2.AVG_DepartmentSalary AS "DifferenceWithDepartmentsSalary",
    RANK() OVER(PARTITION BY CTE1.department_id ORDER BY CTE1.salary DESC) AS "RankingSalaryByDepartment"

FROM
    CTE_EmployeeSalary CTE1 
    JOIN CTE_AVGSalarybyDepartment CTE2
    ON CTE1.department_id = CTE2.department_id


-- Add the rank for each employee based on their salary within their department (highest salary gets rank 1).

SELECT
    employee_id,
    salary,
    RANK() OVER(PARTITION BY department_id ORDER BY salary DESC) AS "RankingSalaryByDepartment"

FROM 
    Employee_Salaries


/*You have a table called Orders with the following columns:

order_id (INT)
customer_id (INT)
order_date (DATE)
order_amount (DECIMAL)


Task:
1. Write a query to find the average order amount for each customer.
2. For each order, calculate the difference between the order amount and the average order amount of that customer.
3. For each customer, rank their orders based on order_amount in descending order (highest orders ranked first).
4. Only show customers who have placed more than 3 orders.

*/

WITH CTE1_AVGCustomerOrdersAmount AS (
    
    SELECT
        customer_id,
        AVG(order_amount) as "AVGOrderAmount",
    FROM 
        Orders
    GROUP BY 
        customer_id
),

    CTE2_CustomerOrders AS (

        SELECT
            order_id,
            customer_id,
            order_amount
        FROM
            Orders
    )

    SELECT 
        CTE2.order_id,
        CTE2.customer_id,
        CTE2.order_amount,
        CTE1.AVGOrderAmount,
        CTE2.order_amount - CTE1.AVGOrderAmount AS "DifferenceWithAVGOrderAmount",
        RANK() OVER (PARTITION BY customer_id ORDER BY order_amount DESC) AS "RankByOrders"
    
    FROM
        CTE1_AVGCustomerOrdersAmount CTE1 
        JOIN
        CTE2_CustomerOrders CTE2
        ON CTE1.customer_id = CTE2.customer_id
    WHERE 
        cte2.customer_id IN (SELECT 
                                customer_id
                            FROM
                                Orders
                            GROUP BY customer_id
                            HAVING COUNT(order_id) >3)



--
/*

You have a table called Sales with the following columns:

sale_id (INT)
salesperson_id (INT)
sale_date (DATE)
sale_amount (DECIMAL)

Example Table Data:
sale_id	salesperson_id	sale_date	sale_amount
1	    101	            2024-01-01	500
2	    101	            2024-01-05	700
3	    101	            2024-01-10	800
4	    102	            2024-01-03	400
5	    102	            2024-01-08	600

*/

--Use ROW_NUMBER() to assign a unique sequential number to each sale within each salesperson, ordered by sale_date.
SELECT
    sale_id,
    salesperson_id,
    sale_date,
    sale_amount,
    ROW_NUMBER() OVER (PARTITION BY salesperson_id ORDER BY sale_date) AS "SequentialSale"

FROM
    Sales

--Use LEAD() to calculate the difference in sales amounts between the current sale and the next sale (for each salesperson).

SELECT
    sale_id,
    salesperson_id,
    sale_date,
    sale_amount - 
    LEAD(sale_amount,1) OVER (PARTITION BY salesperson_id ORDER BY sale_date) AS "DifferenceWithNextSale"

FROM
    Sales

--Use LAG() to calculate the difference in sales amounts between the current sale and the previous sale (for each salesperson).

SELECT
    sale_id,
    salesperson_id,
    sale_date,
    sale_amount - 
    LAG(sale_amount,1) OVER (PARTITION BY salesperson_id ORDER BY sale_date) AS "DifferenceWithPreviousSale"

FROM
    Sales

--Use SUM() with a window to calculate a running total of sales for each salesperson, ordered by sale_date.

SELECT
    sale_id,
    salesperson_id,
    sale_date,
    sale_amount
    SUM(sale_amount) OVER (PARTITION BY salesperson_id ORDER BY sale_date) AS "RunningTotalSalesBySalesPerson"

FROM
    Sales

--Use AVG() with a window to calculate a moving average of sales for each salesperson over the last 3 sales.

SELECT
    sale_id,
    salesperson_id,
    sale_date,
    sale_amount,
    AVG(sale_amount) OVER (PARTITION BY salesperson_id ORDER BY sale_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS "MovingAVGThreeSAles"

FROM
    Sales

--Use PERCENT_RANK() to rank the sales amounts within each salesperson's group.

SELECT
    sale_id,
    salesperson_id,
    sale_date,
    sale_amount,
    PERCENT_RANK() OVER (PARTITION BY salesperson_id ORDER BY sale_date DESC) AS "PercentRankSales"

FROM
    Sales


/*

Scenario 1: Customer Retention Analysis
You have a table called Customer_Transactions:

customer_id (INT)
transaction_id (INT)
transaction_date (DATE)
transaction_amount (DECIMAL)

Task:
ROW_NUMBER(): Find the first transaction for each customer.
LEAD(): Calculate the number of days between each transaction and the next transaction for each customer (to identify potential churn).
SUM(): Calculate the total amount spent by each customer as a running total, ordered by transaction date.
AVG() with window: Calculate the average amount spent by a customer over their last 5 transactions.

*/

--ROW_NUMBER(): Find the first transaction for each customer.

WITH CTE_TransactionsByCustomer AS (
    SELECT 
        customer_id,
        transaction_id,
        transaction_date,
        transaction_amount,
        ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY transaction_date) AS "FirstCustomerTransaction"
FROM
    Customer_Transactions
),

    CTE_FirstTransactionByCustomer AS (
    
        SELECT 
                *
        FROM
                CTE_TransactionsByCustomer
        WHERE 
                FirstCustomerTransaction = 1 

)

SELECT 
    * 
FROM 
    CTE_FirstTransactionByCustomer;

--LEAD(): Calculate the number of days between each transaction and the next transaction for each customer (to identify potential churn).

 
    SELECT 
        customer_id,
        transaction_id,
        transaction_date,
        transaction_amount,
        DATEDIFF(LEAD(transaction_date,1) OVER (PARTITION BY customer_id ORDER BY transaction_date ASC), transaction_date) as "DaysBetweenTransactions"
FROM
    Customer_Transactions

--SUM(): Calculate the total amount spent by each customer as a running total, ordered by transaction date.

SELECT
        customer_id,
        transaction_id,
        transaction_date,
        transaction_amount,
        SUM(transaction_amount) OVER (PARTITION BY customer_id ORDER BY transaction_date ASC) as "TotalAmounByCustomer"   
FROM
    Customer_Transactions

--AVG() with window: Calculate the average amount spent by a customer over their last 5 transactions.

SELECT
        customer_id,
        transaction_id,
        transaction_date,
        transaction_amount,
        AVG(transaction_amount) OVER (PARTITION BY customer_id ORDER BY transaction_date ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) as "MovingAVGFiveDaysByCustomer"   
FROM
    Customer_Transactions

/*
Scenario 2
Table: Sales_Targets

salesperson_id (INT)
target_amount (DECIMAL)
sale_date (DATE)
sale_amount (DECIMAL)

Tasks:
RANK(): Rank the salespeople by their total sales in the current quarter.
SUM() with window: Calculate a running total of each salesperson's sales compared to their sales target.
LAG(): Compare each salesperson's current sale to their previous sale to understand performance trends.
PERCENT_RANK(): Calculate the percent rank of each salesperson’s sales relative to the group to see how well they are performing.

*/

--RANK(): Rank the salespeople by their total sales in the current quarter.

SELECT
    salesperson_id,
    EXTRACT(QUARTER FROM sale_date) as "Quarter",
    sum(sale_amount),
    RANK() OVER (PARTITION BY EXTRACT(QUARTER FROM sales_date) ORDER BY SUM(sale_amount)) AS  "RankingByQuarter"
FROM
    Sales_Targets
GROUP BY salesperson_id, EXTRACT(QUARTER FROM sale_date)

--SUM() with window: Calculate a running total of each salesperson's sales compared to their sales target.

SELECT
    salesperson_id,
    sale_date,
    sale_amount,
    SUM(sale_amount) OVER (PARTITION BY salesperson_id ORDER BY sale_date ASC) AS "RunningTotalBySalesPerson",
    target_amount

FROM
    Sales_Targets

    e1 - 10/08/2024 - 1000 - 1000 - 5000
    e1 - 10/09/2024 - 500  - 1500 - 5000
    e1 - 10/10/2024 - 1000 - 2500 - 5000

--LAG(): Compare each salesperson's current sale to their previous sale to understand performance trends.

SELECT
salesperson_id,
sale_date,
sale_amount,
LAG(sale_amount,1) OVER (PARTITION BY salesperson_id ORDER BY sale_date) as "PreviousSale"

FROM
    Sales_Targets

e1 - 10/10/2024 - 1000 - 2000 
e1 - 10/09/2024 - 2000

--PERCENT_RANK(): Calculate the percent rank of each salesperson’s sales relative to the group to see 
--how well they are performing.

SELECT
salesperson_id,
sale_amount,
PERCENT_RANK() OVER (PARTITION BY salesperson_id ORDER BY sale_amount) AS "PercentRank"

FROM
    Sales_Targets


/*

Great! Let's move on to Scenario 3: Product Sales Trends.

Table: Product_Sales

product_id (INT)
sale_date (DATE)
sale_amount (DECIMAL)

Tasks:
ROW_NUMBER(): Identify the first sale of each product.
LAG(): Calculate the change in sales amount from the previous day for each product.
SUM() with window: Calculate the total sales for each product as a running total, ordered by sale_date.
PERCENT_RANK(): Rank products based on their total sales to understand the best-selling products.

*/

--ROW_NUMBER(): Identify the first sale of each product.

WITH CTE_ProductSalesWithRN AS (
    SELECT
        product_id,
        sale_date,
        sale_amount,
        ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY sale_date) as "RowNumber" 
    FROM
        Product_Sales
)

    SELECT
        a.*  
    FROM CTE_ProductSalesWithRN a

    WHERE 
        RowNumber = 1

--LAG(): Calculate the change in sales amount from the previous day for each product.

SELECT
    product_id,
    sale_date,
    sale_amount,
    LAG(sale_amount,1) OVER (PARTITION BY product_id ORDER BY sale_date) as "PreviousSale",
    sale_amount - 
    LAG(sale_amount,1) OVER (PARTITION BY product_id ORDER BY sale_date) as "PreviousSale"

FROM 
    Product_Sales

--SUM() with window: Calculate the total sales for each product as a running total, ordered by sale_date.

SELECT
    product_id,
    sale_date,
    sale_amount,
    SUM(sale_amount) OVER (PARTITION BY product_id ORDER BY sale_date) AS "RunningTotalByProduct"
FROM
    Product_Sales

--PERCENT_RANK(): Rank products based on their total sales to understand the best-selling products.

With CTE_TotalSalesByProduct as (
    
    SELECT
        product_id,
        sum(sale_amount) AS "TotalProductSales"
    FROM
        Product_Sales
    GROUP BY 1
)

SELECT 
    a.*,
    PERCENT_RANK() OVER (ORDER BY TotalProductSales) as "Percent_Rank"
FROM 
    CTE_TotalSalesByProduct a

/*
Great! Let’s move on to Scenario 4: Employee Performance Tracking.

Table: Employee_Performance

employee_id (INT)
review_date (DATE)
performance_score (DECIMAL)
Tasks:
RANK(): Rank employees based on their performance score within their department.
LEAD(): Compare an employee’s current performance score to the next performance review.
SUM() with window: Track an employee’s cumulative performance score over time.
AVG() with window: Calculate the average performance score over an employee’s last 3 reviews.


*/

--RANK(): Rank employees based on their performance score within their department.

SELECT
    employee_id,
    review_date,
    performance_score,
    RANK() OVER (ORDER BY performance_score desc) as "RankingByPerformance"

FROM
    Employee_Performance

RANK - 
    -Partition by 
    -order by
    -ASC - DESC 
E1 - 10/10/2024 - 9 - 1
E2 - 10/10/2024 - 8 - 2

--LEAD(): Compare an employee’s current performance score to the next performance review.

SELECT
    employee_id,
    review_date,
    performance_score,
    LEAD(performance_score,1) OVER (PARTITION BY employee_id order by review_date) AS "NextPerformanceReview",
    performance_score - LEAD(performance_score,1) OVER (PARTITION BY employee_id order by review_date) AS "ActualMinusNextPerformance"

FROM    
    Employee_Performance

    -- 10/10/2024 
    -- 10/11/2024
    -- 10/12/2024

--SUM() with window: Track an employee’s cumulative performance score over time.
--Cumulative means running total

SELECT
    employee_id,
    review_date,
    performance_score,
    SUM(performance_score) OVER(PARTITION BY employee_id ORDER BY review_date) AS "CumulativePerformance"

FROM
    Employee_Performance


--AVG() with window: Calculate the average performance score over an employee’s last 3 reviews.
--ROWS BETWEEN X AND CURRENT ROW
SELECT
    employee_id,
    review_date,
    performance_score,
    AVG(performance_score) OVER(PARTITION BY employee_id ORDER BY review_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS "AVGThreeScores"
FROM
    Employee_Performance

/*
Table: Monthly_Revenue

month (DATE)
region (VARCHAR)
revenue (DECIMAL)

Tasks:
ROW_NUMBER(): Identify the first month of recorded revenue for each region.
LEAD(): Calculate the month-over-month revenue growth for each region.
SUM() with window: Calculate the running total of revenue for each region over time.
PERCENT_RANK(): Calculate the percent rank of each region's revenue compared to other regions for a given month.

*/

--Identify the first month of recorded revenue for each region.
--Row_Number  - partition by region order by month asc. Done.
-- 1cte to add the rownum and then choosing the RN1.

WITH CTE1_AddingRowNumber AS (

    SELECT
        region,
        revenue,
        month,
        ROW_NUMBER() OVER(PARTITION BY REGION ORDER BY MONTH) AS "RowNumberByRegion"

    FROM
        Monthly_Revenue
)

SELECT 
    a.region,
    a.revenue,
    a.month as "FirstRevenueMonth"
FROM 
    CTE1_AddingRowNumber a

WHERE   
    RowNumberByRegion = 1

--Calculate the month-over-month revenue growth for each region.
--LEAD() OVER(PB Region OB date)
-- retrieve following revenue
-- current - following one 

SELECT
    region,
    revenue,
    month,
    LEAD(revenue,1) OVER(PARTITION BY region ORDER BY month) AS "NextMonthRevenue",
    revenue - LEAD(revenue,1) OVER(PARTITION BY region ORDER BY month) AS "DiffCurrentWithNextMonthRevenue" 
FROM
    Monthly_Revenue


east - 1000 - january - 500 - 500

--Calculate the running total of revenue for each region over time.
--Running total = SUM()
-- Each region = PARTION BY region
-- Over time = ORDER BY date

SELECT
    month,
    region,
    revenue,
    SUM(Revenue) OVER(PARTITION BY region ORDER BY month) as "RunningTotal"

FROM
    Monthly_Revenue

January - West - 1000 - 1000
February - West - 500 - 1500 

--Calculate the percent rank of each region's revenue compared to other regions for a given month
-- PERCENT_RANK() 
-- Partion BY all regions
-- order by total monthly revenue

CTE1_TotalMonthlyRevenue AS (

    SELECT 
        region,
        month,
        SUM(revenue) as "TotalMonthlyRevenue"
    FROM
        Monthly_Revenue
    GROUP BY 1,2
)
-- WEST - JANUARY - 10.000
-- WEST - FEBRUARY - 20.000

SELECT 
    a.*,
    PERCENT_RANK() OVER(ORDER BY TotalMonthlyRevenue DESC) AS "PercentRank"

FROM 
    CTE1_TotalMonthlyRevenue a

-- west - 10000 - 1
-- east - 5000 - 0.75


/*
You have a table called Sales with the following columns:

sale_id (INT)
salesperson_id (INT)
sale_date (DATE)
sale_amount (DECIMAL)

Question:
Write a query to find the total sales amount for each salesperson and show their rank based on the total 
sales amount (from highest to lowest).

*/

--Total sales amount -> SUM(sales)
--e1 - 100.000 - 1 
-- e2 - 75.000 - 2

WITH CTE1_TotalSalesBySalesPerson AS (
    SELECT
        salesperson_id,
        SUM(sale_amount) as "TotalSales"
    FROM
        Sales
    GROUP BY 1)
--e1 - 200.000
--e2 - 175.000 

SELECT 
    a.*,
    RANK() OVER(ORDER BY TotalSales DESC) AS "RankBySales"

FROM 
    CTE1_TotalSalesBySalesPerson a

--e1 - 200.000 - 1
--e2 - 175.000 - 2

/*
You have a table called Employees:

employee_id (INT)
department_id (INT)
hire_date (DATE)
salary (DECIMAL)

Question:
Write a query to find the second highest salary for each department.
*/

-- CTE TO RANK salaries 
-- PARTITION BY (department) ORDER BY salaries
-- RANK = 2

CTE1_RankingSalaries AS (

    SELECT  
        employee_id,
        department_id,
        salary,
        RANK() OVER(PARTITION BY department_id ORDER BY salary DESC) AS "RankingBySalaries"
    FROM
        Employees
)

SELECT 
    a.*

FROM
    CTE1_RankingSalaries a
WHERE
    RankingBySalaries = 2

/*
You have a table called Orders:

order_id (INT)
customer_id (INT)
order_date (DATE)
order_amount (DECIMAL)

Question:
Write a query to calculate the running total of orders for each customer, ordered by order_date.
*/
-- RunningTotal = SUM(order_amount) PB Customer OB order date 
-- 

SELECT
    customer_id,
    order_id,
    order_date,
    order_amount,
    SUM(order_amount) OVER (PARTITION BY customer_id ORDER BY order_date) AS "RunningTotalByCustomerID"

FROM
    Orders
-- C1 - O1 - 11/10/2021 - 10.000 - 10.000
-- C1 - O2 - 12/10/2021 - 11.000 - 21.000

/*
You have a table called Products:

product_id (INT)
category_id (INT)
price (DECIMAL)

Question:
Write a query to find the third most expensive product in each category.

*/

--RANK product Partition By Category OB price DESC 

WITH CTE1_RankingProducts AS (
    SELECT
        product_id,
        category_id,
        price,
        RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS "RankByPrice"
    FROM
        Products

) 

SELECT 
    a.*
FROM
    CTE1_RankingProducts a

WHERE
    RankByPrice = 3
 

/*
You have a table called Employees:

employee_id (INT)
department_id (INT)
hire_date (DATE)

Question:
Write a query to find the most recently hired employee in each department.

*/

--RANK PB department_id OB hiredate DESC -> Choose 1
--11/10/2024
--10/10/2024

WITH CTE1_RankingEmployeesByHiringDate AS (
    SELECT  
        employee_id,
        department_id,
        hire_date,
        RANK() OVER(PARTITION BY department_id ORDER BY hire_date DESC) AS "RankingByHireDate"
    from
        Employees

)

SELECT 
    a.*
FROM
    CTE1_RankingEmployeesByHiringDate a
WHERE
    RankingByHireDate = 1


/*
--You have a table called Transactions:

transaction_id (INT)
account_id (INT)
transaction_date (DATE)
amount (DECIMAL)

Question:
Write a query to calculate the difference between the amount of each transaction 
and the previous transaction for the same account.

*/

--Difference actual - previous transactions
--Same account - partition by account id
--Order By transaction date DESC

10/10/2024
11/10/2024
12/10/2024

SELECT
    transaction_id,
    account_id,
    transaction_date,
    amount,
    LAG(AMOUNT,1) OVER(PARTITION BY account_id ORDER BY transaction_date) as "PreviousTransactionAmount",
    amount - LAG(AMOUNT,1) OVER(PARTITION BY account_id ORDER BY transaction_date) as "DiffWithPreviousTransaction"
FROM
    Transactions

/*
You have a table called Attendance:

employee_id (INT)
attendance_date (DATE)
status (VARCHAR) - values are either 'Present' or 'Absent'

Question:
Write a query to calculate the consecutive days each employee was present.

*/

-- actual date with previous date
-- status = present

CTE1_AddingPreviousDate AS (
    SELECT
        employee_id,
        attendance_date,
        status,
        LAG(attendance_date,1) OVER(PARTITION BY employee_id ORDER BY attendance_date) AS "PreviousDate"
    FROM
        Attendance
    WHERE
        status = 'present'       
),

CTE_AddingFlagConsecutiveDays AS (

    SELECT
        a.*,
        CASE WHEN DATEADD(DAY, -1, attendance_date) = PreviousDate THEN 1
            ELSE 0
        END AS "FlagConsecutivePresentDays"
    
    FROM 
        CTE1_AddingPreviousDate a

)

SELECT
    employee_id,
    SUM(FlagConsecutivePresentDays) +1 AS "TotalConsecutivePresentDays"
FROM
    CTE_AddingFlagConsecutiveDays
GROUP BY 1

/*
You have a table called Orders:

order_id (INT)
customer_id (INT)
order_date (DATE)
order_amount (DECIMAL)

Question:
Write a query to calculate the number of days between each order and the previous order for each customer.
*/

--LAG date,1 
--DATEDIFF order_Date, previous_order_Date

WITH CTE1_AddingPreviousDate AS 
    (SELECT
        order_id,
        customer_id,
        order_Date,
        LAG(order_Date,1) OVER(PARTITION BY customer_id ORDER BY order_Date) AS "PreviousOrderDate"
    FROM
        Orders
    )

SELECT 
    a.*,
    DATEDIFF(DAY,order_Date,PreviousOrderDate) as "DifferenceBetweenOrders"

FROM
    CTE1_AddingPreviousDate


-- lead() pb player id order by ASC 

--Get first loggin date

WITH CTE1_FirstLogin AS (
    SELECT
        player_id,
        MIN(event_Date) AS "FirstLoginDate"
    FROM
        Activity
    GROUP BY 1

), 
--P1 - 10/10/2024

-- Login the day after they first login

 CTE2_FollowingLogin AS (


    SELECT
        player_id,
        event_Date,
        LEAD(event_Date,1) OVER(PARTITION BY player_id ORDER BY event_Date) AS "FollowingLogInDate"
    FROM 
        Activity
 )

-- P1 - 10/10/2024 - 10/11/2024
-- P1 - 10/11/2024 - 10/13/2024

SELECT 
    ROUND(
            COUNT(DISTINCT CASE WHEN DATEADD(DAY,1,a.FirstLoginDate) = b.FollowingLogInDate THEN a.player_id END) / 
            COUNT(DISTINCT a.player_id),
    2
    ) AS "FractionOfPlayers"
FROM
    CTE1_FirstLogin a
    JOIN
    CTE2_FollowingLogin b
    ON 
    a.player_id = b.player_id
    AND B.FollowingLogInDate > A.FirstLoginDate


--

/*
You have the following table called Orders:

order_id (INT): Unique identifier for each order.
customer_id (INT): ID of the customer who made the purchase.
order_date (DATE): The date when the order was placed.
order_amount (DECIMAL): Total amount of the order.

Task:
Write a query to calculate the fraction of customers who made at least one order on 
two consecutive days (i.e., two orders made one day apart).

*/

-- first order date

-- following order date

-- first order date +1 day =following order date?

WITH CTE1_FollowingOrderDate AS (
    
    SELECT
        customer_id,
        order_date,
        LEAD(order_date,1) OVER(PARTITION BY customer_id ORDER BY order_date) AS "FollowingOrderDate"
    FROM
        Orders
)

SELECT
    ROUND(COUNT(DISTINCT CASE WHEN DATEADD(DAY,1,OrderDate) = FollowingOrderDate THEN customer_id END) / COUNT(DISTINCT customer_id),2) AS "FractionOfCustomers"

FROM
    CTE1_FollowingOrderDate

--
/*
You have the following Transactions table:

transaction_id (INT): Unique identifier for each transaction.
customer_id (INT): ID of the customer who made the transaction.
transaction_date (DATE): The date when the transaction occurred.
amount (DECIMAL): Total amount of the transaction.

Task:
Write a query to identify the fraction of customers who have not made any transactions 
in the last 30 days from the most recent transaction date in the dataset.
*/

-- max date = most recent transaction

WITH MostRecentTransactionDate AS (
    SELECT
        customer_id,
        MAX(transaction_date) AS "MostRecentTransactionDate"
    FROM
        transactions
    GROUP BY 1
)

SELECT                                                                          
    ROUND(COUNT(DISTINCT CASE WHEN MostRecentTransactionDate < DATEADD(DAY,-30,MostRecentTransactionDate) then customer_id END)/ COUNT(DISTINCT customer_id),
    2
    ) AS "FractionOfCustomers"

FROM
    MostRecentTransactionDate


